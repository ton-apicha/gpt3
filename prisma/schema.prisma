// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

/// Core user with optional credentials login and NextAuth relations
model User {
  id            String      @id @default(cuid())
  email         String      @unique
  name          String?
  image         String?
  passwordHash  String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Auth relations
  accounts      Account[]
  sessions      Session[]

  // RBAC
  roles         UserRole[]

  // App relations
  chats         Chat[]
  activityLogs  ActivityLog[]
}

/// Role-based access control (extensible)
model Role {
  id               String            @id @default(cuid())
  name             String            @unique
  description      String?
  createdAt        DateTime          @default(now())
  users            UserRole[]
  rolePermissions  RolePermission[]
}

model Permission {
  id          String            @id @default(cuid())
  key         String            @unique
  description String?
  createdAt   DateTime          @default(now())
  roleLinks   RolePermission[]
}

model UserRole {
  userId    String
  roleId    String
  assignedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}

model RolePermission {
  roleId       String
  permissionId String

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
}

/// NextAuth standard models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/// Chat and messages
model Chat {
  id        String    @id @default(cuid())
  userId    String
  title     String?
  modelId   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  model   Model? @relation(fields: [modelId], references: [id])
  messages Message[]
  requests RequestLog[]
}

enum MessageRole {
  user
  assistant
  system
  tool
}

model Message {
  id        String      @id @default(cuid())
  chatId    String
  role      MessageRole @default(user)
  content   String
  modelId   String?
  tokens    Int?
  createdAt DateTime    @default(now())

  chat  Chat  @relation(fields: [chatId], references: [id], onDelete: Cascade)
  model Model? @relation(fields: [modelId], references: [id])
}

/// AI Models catalog
model Model {
  id            String    @id // e.g. "llama3:latest" or "gpt-4o"
  provider      String    // e.g. "ollama", "openai"
  label         String?
  contextLength Int?
  temperature   Float?
  enabled       Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  chats        Chat[]
  messages     Message[]
  requests     RequestLog[]
}

/// Application settings (key-value JSON)
model Setting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// API keys & Integrations
model ApiKey {
  id         String   @id @default(cuid())
  name       String
  provider   String
  key        String
  encrypted  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

/// Activity log for auditing
model ActivityLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  target    String?
  metadata  Json?
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id])
}

/// Request/performance metrics per chat/model invocation
model RequestLog {
  id               String   @id @default(cuid())
  chatId           String?
  modelId          String?
  durationMs       Int?
  promptTokens     Int?
  completionTokens Int?
  totalTokens      Int?
  success          Boolean  @default(true)
  error            String?
  createdAt        DateTime @default(now())

  chat  Chat?  @relation(fields: [chatId], references: [id])
  model Model? @relation(fields: [modelId], references: [id])
}

/// Error logs
model ErrorLog {
  id        String   @id @default(cuid())
  level     String?
  message   String
  stack     String?
  context   Json?
  createdAt DateTime @default(now())
}
